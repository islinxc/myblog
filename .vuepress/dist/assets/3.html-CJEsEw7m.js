import{_ as t,r as l,o,c as i,a as p,w as e,e as n,d as s}from"./app-C7yTy80j.js";const c={},u=s(`<h2 id="_1-if条件分支结构" tabindex="-1"><a class="header-anchor" href="#_1-if条件分支结构"><span>1. if条件分支结构</span></a></h2><p>如果 Python程序的多行代码之间没有任何流程控制，则程序总是<strong>从上向下</strong> 依次执行。</p><p>但是现实生活中，我经常遇到一些需要做判断的业务流程。比如去银行ATM取款，如果密码输入正确，则可以取款。如果密码输入错误，则提示让用户重新输入密码。</p><h3 id="布尔类型和比较运算符" tabindex="-1"><a class="header-anchor" href="#布尔类型和比较运算符"><span>布尔类型和比较运算符</span></a></h3><p>布尔( bool）表达现实生活中的逻辑，即真和假，True表示真，False表示假。</p><p><strong>案例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 布尔类型定义</span></span>
<span class="line">b1 <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">b2 <span class="token operator">=</span> <span class="token boolean">False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;b1=</span><span class="token interpolation"><span class="token punctuation">{</span>b1<span class="token punctuation">}</span></span><span class="token string">,类型是</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;b1=</span><span class="token interpolation"><span class="token punctuation">{</span>b2<span class="token punctuation">}</span></span><span class="token string">,类型是</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503151510270.png" alt="image-20240503151510270"></p><p><strong>比较运算符</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503151617801.png" alt="image-20240503151617801"></p><p>比较运算符的返回结果是布尔类型。</p><p><strong>案例：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 比较运算符</span></span>
<span class="line">n1 <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">n2 <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;n1==n2的结果是：{n1==n2}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;n1!=n2的结果是：{n1!=n2}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;n1&gt;n2的结果是：{n1&gt;n2}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;n1&gt;=n2的结果是：{n1&gt;=n2}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;n1&lt;n2的结果是：{n1&lt;n2}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">print<span class="token punctuation">(</span>f<span class="token string">&quot;n1&lt;=n2的结果是：{n1&lt;=n2}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503151851245.png" alt="image-20240503151851245"></p><h3 id="if语句语法格式" tabindex="-1"><a class="header-anchor" href="#if语句语法格式"><span>if语句语法格式</span></a></h3><p><strong>if语句基本语法格式</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">if</span> 判断条件 <span class="token punctuation">:</span></span>
<span class="line">	执行内容<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">age <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的年龄：&quot;</span><span class="token punctuation">)</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;我今年</span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string">岁了&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;已经成年了&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我要好好学习，天天向上&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503152248940.png" alt="image-20240503152248940"></p>`,23),r=s(`<p>第一 判断条件后面要加冒号:</p><p>第二 执行内容前面要有4个空格（或者一个Tab键）</p><p>第三 判断条件返回值为布尔类型</p><h3 id="if-else语句语法格式" tabindex="-1"><a class="header-anchor" href="#if-else语句语法格式"><span>if else语句语法格式</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">if</span> 判断条件 <span class="token punctuation">:</span></span>
<span class="line">	满足条件执行内容<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token punctuation">:</span></span>
<span class="line">	不满足条件执行内容</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">age <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄：&quot;</span><span class="token punctuation">)</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> age<span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你已经成年了，要学会独立！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你还小，要听父母话！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503153011635.png" alt="image-20240503153011635"></p>`,9),k=s(`<p>第一 else后面要加冒号: 第二 else 执行内容前面也是四个空格</p><h3 id="if-elif-else语句语法格式" tabindex="-1"><a class="header-anchor" href="#if-elif-else语句语法格式"><span>if elif else语句语法格式</span></a></h3><p>当有多个条件判断的时候，我们可以通过if elif else来实现</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">    条件<span class="token number">1</span>满足执行内容</span>
<span class="line"><span class="token keyword">elif</span> 条件<span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">    条件<span class="token number">2</span>满足执行内容</span>
<span class="line"><span class="token keyword">elif</span> 条件n<span class="token punctuation">:</span></span>
<span class="line">    条件n满足执行内容</span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    以上条件都不满足执行内容</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">score <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的成绩：&quot;</span><span class="token punctuation">)</span></span>
<span class="line">score <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩优秀！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩良好！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> score <span class="token operator">&gt;=</span><span class="token number">60</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩及格！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩不及格！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503154132151.png" alt="image-20240503154132151"></p><h3 id="if语句的嵌套应用" tabindex="-1"><a class="header-anchor" href="#if语句的嵌套应用"><span>if语句的嵌套应用</span></a></h3><p>有时候业务上有多维度复杂条件判断，我们需要用到if语句的嵌套来实现。</p><p><strong>举例：</strong> 我们在一些游戏网站活动充值时，冲100送 20 冲200送50 ，但是vip用户的话，冲100送 30，冲200送70</p><p><strong>代码实现：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">vip <span class="token operator">=</span> <span class="token boolean">False</span></span>
<span class="line">amount <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入充值金额：&quot;</span><span class="token punctuation">)</span></span>
<span class="line">amount <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> amount <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> vip<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;总共充值&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;总共充值&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> amount <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> vip<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;总共充值&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">70</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;总共充值&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503155748622.png" alt="image-20240503155748622"></p><p>作业：猜数字游戏作业；1到10先随机生成一个数字。 通过if嵌套语句，用户输入数字猜测，猜对了，则直接提示正确，否则提示大了或者小了，最多猜三次。 <strong>提示：</strong> 通过random.randint()方法可以生成随机数字；</p><p><strong>代码：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> random</span>
<span class="line">num <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;生成的随机数字是</span><span class="token interpolation"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">inputNum <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;第一次猜是：&quot;</span><span class="token punctuation">)</span></span>
<span class="line">inputNum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>inputNum<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> inputNum <span class="token operator">==</span> num<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜你，第一次就猜中了！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> inputNum <span class="token operator">&gt;</span> num<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，你第一次猜的数大了，请重新输入&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，你第一次猜的数小了，请重新输入&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    inputNum <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;第二次猜是：&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    inputNum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>inputNum<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> inputNum <span class="token operator">==</span> num<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜你，第二次猜中了！&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> inputNum <span class="token operator">&gt;</span> num<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，你第二次猜的数大了，请重新输入&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，你第二次猜的数小了，请重新输入&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        inputNum <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;第三次猜是：&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        inputNum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>inputNum<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> inputNum <span class="token operator">==</span> num<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜你，第三次猜中了！&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> inputNum <span class="token operator">&gt;</span> num<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，你第三次猜的数大了，游戏结束&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，你第三次猜的数小了，游戏结束&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503172401460.png" alt="image-20240503172401460"></p><h2 id="_2-while循环结构" tabindex="-1"><a class="header-anchor" href="#_2-while循环结构"><span>2. while循环结构</span></a></h2><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体。当反复执行这个循环体时，需要在合适的时候把循环条件改为假，从而结束循环；否则循环将一直执行下去，形成死循环。</p><h3 id="while循环语句语法格式" tabindex="-1"><a class="header-anchor" href="#while循环语句语法格式"><span>while循环语句语法格式</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">初始化语句</span>
<span class="line"><span class="token keyword">while</span> 循环条件<span class="token punctuation">:</span></span>
<span class="line">	循环体</span>
<span class="line">    迭代语句</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>初始化语句：</strong> 一条或多条语句，用于完成一些初始化工作。初始化语句在循环开始之前执行。</li><li><strong>循环条件：</strong> 这是一个布尔表达式，这个表达式能决定是否执行循环体。</li><li><strong>循环体：</strong> 这个部分是循环的主体，如果循环条件允许，这个代码块将被重复执行。</li><li><strong>迭代语句：</strong> 这个部分在一次执行循环体结束后，对循环条件求值之前执行，通常用于控制循环条件中的变量，使得循环在合适的时候结束。</li></ul><p><strong>基本案例</strong> 1+2+3+...+10 求和 ，用while循环语句实现：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">i <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> i</span>
<span class="line">    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;1+2+3+...+10 求和的值为：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">sum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503174123752.png" alt="image-20240503174123752"></p>`,29),d=s(`<h3 id="while循环嵌套" tabindex="-1"><a class="header-anchor" href="#while循环嵌套"><span>while循环嵌套</span></a></h3><p>我们在while循环内部还可以继续通过while循环来实现复杂得应用，比如我们打印二维的行列。</p><p><strong>代码实现：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 定义行</span></span>
<span class="line">i <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token comment"># 打印5行</span></span>
<span class="line"><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;打印第</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">行&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 定义列</span></span>
<span class="line">    j <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token comment"># 打印8列</span></span>
<span class="line">    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;打印第</span><span class="token interpolation"><span class="token punctuation">{</span>j<span class="token punctuation">}</span></span><span class="token string">列&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line">        j <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    i <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;哇哇，打印完了&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503175118503.png" alt="image-20240503175118503"></p><p><strong>案例：</strong> 通过while循环嵌套打印九九乘法表；</p><p><strong>代码实现：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 列 * 行</span></span>
<span class="line">hang <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">while</span> hang <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span></span>
<span class="line">    lie <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">while</span> lie <span class="token operator">&lt;=</span> hang<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>lie<span class="token punctuation">}</span></span><span class="token string">*</span><span class="token interpolation"><span class="token punctuation">{</span>hang<span class="token punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">{</span>lie<span class="token operator">*</span>hang<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        lie <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    hang <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240503180048686.png" alt="image-20240503180048686"></p>`,11),m=s(`<h2 id="_3-for循环结构" tabindex="-1"><a class="header-anchor" href="#_3-for循环结构"><span>3. for循环结构</span></a></h2><p>对于固定数据集的元素挨个操作，我们用for循环遍历更加适合。 这里的数据集常见的是字符串，集合，元组，列表，字典等(我们后面会学到) <strong>我们先通过for循环遍历字符串来讲解。</strong></p><h3 id="for循环语句语法格式" tabindex="-1"><a class="header-anchor" href="#for循环语句语法格式"><span>for循环语句语法格式</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 待遍历的数据集<span class="token punctuation">:</span></span>
<span class="line">	执行代码</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例1 通过for循环遍历字符串，打印挨个每个字符：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 定义字符串website</span></span>
<span class="line">website <span class="token operator">=</span> <span class="token string">&quot;www.baidu.com&quot;</span></span>
<span class="line"><span class="token comment"># 通过for循环遍历website字符串，拿到每个字符串字符</span></span>
<span class="line"><span class="token keyword">for</span> w <span class="token keyword">in</span> website<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240504225255770.png" alt="image-20240504225255770"></p><p><strong>案例2 通过for循环遍历字符串，统计特定字符o，打印出个数</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">char <span class="token operator">=</span> <span class="token string">&quot;中&quot;</span></span>
<span class="line"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;你中有我，我中有你&quot;</span></span>
<span class="line">i <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> s <span class="token operator">==</span> char<span class="token punctuation">:</span></span>
<span class="line">        i<span class="token operator">+=</span><span class="token number">1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\\&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">}</span></span><span class="token string">\\&quot;字符串中有</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">个\\&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>char<span class="token punctuation">}</span></span><span class="token string">\\&quot;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240504225800119.png" alt="image-20240504225800119"></p><h3 id="for循环嵌套" tabindex="-1"><a class="header-anchor" href="#for循环嵌套"><span>for循环嵌套</span></a></h3><p>在有复杂应用的时候，我们可以通过for循环的嵌套来实现。比如打印二维的行列； <strong>这里先学习下range()方法，获取一个数字序列</strong></p><p><strong>案例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># range(stop) 返回0到stop-1的数字序列</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># range(start,stop) 返回start到stop-1的数字序列</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># range(start,stop,step) 返回start到stop-1的数字序列,步长step</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240504230447456.png" alt="image-20240504230447456"></p><p>接下来实现打印二维的行列：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">行&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第</span><span class="token interpolation"><span class="token punctuation">{</span>j<span class="token punctuation">}</span></span><span class="token string">列&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240504230855128.png" alt="image-20240504230855128"></p><h2 id="_4-循环控制continue和break" tabindex="-1"><a class="header-anchor" href="#_4-循环控制continue和break"><span>4. 循环控制continue和break</span></a></h2><p>为了增强循环控制逻辑能力，python提供了continue和break循环控制支持。</p><ul><li>continue 中断本次循环，直接进入下一次循环</li><li>break 直接结束循环</li></ul><p><strong>continue案例</strong> ，跳过4打印结果：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># continue案例，跳过4打印</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505122242008.png" alt="image-20240505122242008"></p><p><strong>break案例</strong> ，遇到4直接结束：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># break案例，遇到4直接结束：</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240522111402575.png" alt="image-20240522111402575"></p><h2 id="_5-循环综合案例-求水仙花数" tabindex="-1"><a class="header-anchor" href="#_5-循环综合案例-求水仙花数"><span>5. 循环综合案例-求水仙花数</span></a></h2><p>水仙花数是指一个 3 位数，它的每个数位上的数字的 3次幂之和等于它本身。例如：1^3 + 5^3+ 3^3 =153。</p><p><strong>代码实现：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 数字xyc</span></span>
<span class="line"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 百位数x 取值1-9</span></span>
<span class="line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 十位数y 取值0-9</span></span>
<span class="line">        <span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 个位数z 取值0-9</span></span>
<span class="line">            s1 <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> z <span class="token comment"># 本身值</span></span>
<span class="line">            s2 <span class="token operator">=</span> x <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> z <span class="token operator">**</span> <span class="token number">3</span> <span class="token comment"># 每个数位上的数字的3次幂之和</span></span>
<span class="line">            <span class="token keyword">if</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;水仙花有：</span><span class="token interpolation"><span class="token punctuation">{</span>s1<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505123019245.png" alt="image-20240505123019245"></p>`,38);function v(g,b){const a=l("font");return o(),i("div",null,[u,p(a,{style:{color:"red"}},{default:e(()=>[n("**注意点：** ")]),_:1}),r,p(a,{style:{color:"red"}},{default:e(()=>[n("**注意点：** ")]),_:1}),k,p(a,{style:{color:"red"}},{default:e(()=>[n("**注意点：** ")]),_:1}),n("一定要有循环终止条件，否则会无限死循环，系统卡死。"),d,p(a,{style:{color:"red"}},{default:e(()=>[n("**补充知识点：** ")]),_:1}),n('在字符串中，有一个特殊的符号 \\t 这个是制表符 效果等同于在键盘上按下"TAB"键，所以九九乘法表的每次打印最后，大家加下 end="\\t"，这样格式就对齐好看了。'),m])}const y=t(c,[["render",v],["__file","3.html.vue"]]),w=JSON.parse('{"path":"/blogs/Python/Pythonyuyanxuexi/3.html","title":"三、流程控制","lang":"en-US","frontmatter":{"title":"三、流程控制","date":"2018/12/29","tags":["Python语言"],"categories":["Python"]},"headers":[{"level":2,"title":"1. if条件分支结构","slug":"_1-if条件分支结构","link":"#_1-if条件分支结构","children":[{"level":3,"title":"布尔类型和比较运算符","slug":"布尔类型和比较运算符","link":"#布尔类型和比较运算符","children":[]},{"level":3,"title":"if语句语法格式","slug":"if语句语法格式","link":"#if语句语法格式","children":[]},{"level":3,"title":"if else语句语法格式","slug":"if-else语句语法格式","link":"#if-else语句语法格式","children":[]},{"level":3,"title":"if elif else语句语法格式","slug":"if-elif-else语句语法格式","link":"#if-elif-else语句语法格式","children":[]},{"level":3,"title":"if语句的嵌套应用","slug":"if语句的嵌套应用","link":"#if语句的嵌套应用","children":[]}]},{"level":2,"title":"2. while循环结构","slug":"_2-while循环结构","link":"#_2-while循环结构","children":[{"level":3,"title":"while循环语句语法格式","slug":"while循环语句语法格式","link":"#while循环语句语法格式","children":[]},{"level":3,"title":"while循环嵌套","slug":"while循环嵌套","link":"#while循环嵌套","children":[]}]},{"level":2,"title":"3. for循环结构","slug":"_3-for循环结构","link":"#_3-for循环结构","children":[{"level":3,"title":"for循环语句语法格式","slug":"for循环语句语法格式","link":"#for循环语句语法格式","children":[]},{"level":3,"title":"for循环嵌套","slug":"for循环嵌套","link":"#for循环嵌套","children":[]}]},{"level":2,"title":"4. 循环控制continue和break","slug":"_4-循环控制continue和break","link":"#_4-循环控制continue和break","children":[]},{"level":2,"title":"5. 循环综合案例-求水仙花数","slug":"_5-循环综合案例-求水仙花数","link":"#_5-循环综合案例-求水仙花数","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/Python/Python语言学习/3.md"}');export{y as comp,w as data};
