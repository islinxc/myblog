import{_ as l,r as i,o,c,b as t,a,w as p,d as n,e}from"./app-CgvB4e-R.js";const u={},r=e(`<p>函数是执行特定任务的一段代码，程序通过将一段代码定义成函数，并为该函数指定一个函数名，这样即可在需要的时候多次调用这段代码。 比如我们前面学到的<strong>range()</strong> 函数，就是系统内置的函数，功能是通过传入参数，返回特定范围的数字序列，函数名是range，我们在需要的时候，可以多次调用。</p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505140034114.png" alt="image-20240505140034114"></p><h2 id="_1-函数的定义" tabindex="-1"><a class="header-anchor" href="#_1-函数的定义"><span>1. 函数的定义</span></a></h2><p><strong>函数的定义语法：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    函数体 <span class="token punctuation">(</span>由零条到多条可执行语句组成的函数<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> 返回值</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),d=t("li",null,"函数名要符合标识符定义，取名的时候要有意义，见名知义。",-1),k=t("li",null,"形参列表是定义该函数可以接受的参数，多个参数都逗号隔开，调用函数的地方传入对应的参数 值。",-1),m=e(`<p><strong>最基础函数定义，以及调用：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">say_helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;看到python就说，你好！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调用函数</span></span>
<span class="line">say_helloworld<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 第二次调用函数</span></span>
<span class="line">say_helloworld<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505140443266.png" alt="image-20240505140443266"></p><h2 id="_2-函数的参数" tabindex="-1"><a class="header-anchor" href="#_2-函数的参数"><span>2. 函数的参数</span></a></h2><p>函数形参部分，可以不定义参数，直接空括号即可。假如有多个参数，逗号隔开。 我们调用的时候，传入的就是实际参数，按照形参定义，顺序传入即可。 <strong>我们看下面这个实例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 定义加方法函数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> x <span class="token operator">+</span> y</span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">+</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line"><span class="token comment"># 调用函数</span></span>
<span class="line">add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505141130516.png" alt="image-20240505141130516"></p><h3 id="关键字-keyword-参数" tabindex="-1"><a class="header-anchor" href="#关键字-keyword-参数"><span>关键字(keyword)参数</span></a></h3><p>前面实例，是位置参数，调用的时候，必须严格按照定义函数时指定的顺序来传入参数值。 如果根据参数名来传入参数值，则无需遵守定义形参的顺序，这种方式被称为<strong>关键字(keyword)参数</strong> 。</p>`,10),v=e(`<ul><li><p>在使用关键字参数的时候，顺序可以随便换</p></li><li><p>部分使用关键字参数，部分使用位置参数</p></li><li><p>混用的时候，关键字参数必须位于位置参数之后，否则报错</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 根据关键字参数来传入参数值</span></span>
<span class="line">add<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 在使用关键字参数的时候，顺序可以随便换</span></span>
<span class="line">add<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 部分使用关键字参数，部分使用位置参数</span></span>
<span class="line">add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 混用的时候，关键字参数必须位于位置参数之后,否则报错</span></span>
<span class="line">add<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数默认值" tabindex="-1"><a class="header-anchor" href="#参数默认值"><span>参数默认值</span></a></h3><p>在某些情况下，程序需要在定义函数时为一个或多个形参指定默认值——这样在调用函数时就可以省略为该形参传入参数值，而是直接使用该形参的默认值。</p><p><strong>语法格式：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">形参名<span class="token operator">=</span>默认值</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;李白&quot;</span><span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">&quot;大河之水天上来&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">说：</span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">say_hi<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505211514368.png" alt="image-20240505211514368"></p>`,9),g=e(`<ul><li>可以全部使用默认参数</li><li>可以部分使用默认参数</li><li>可以全部不使用默认参数</li><li>假如前面参数使用默认参数，后面的参数需要使用关键字参数</li><li>Python要求将带有默认值的参数定义，放在形参列表的最后。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 全部使用默认参数</span></span>
<span class="line">say_hi<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># msg使用默认值</span></span>
<span class="line">say_hi<span class="token punctuation">(</span><span class="token string">&quot;小王&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 两个参数都不使用默认值</span></span>
<span class="line">say_hi<span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我去你家&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># name使用默认值，msg需要使用关键字参数</span></span>
<span class="line">say_hi<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">&quot;也喜欢java&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505212027683.png" alt="image-20240505212027683"></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505212314662.png" alt="image-20240505212314662"></p><h2 id="_3-函数的返回值" tabindex="-1"><a class="header-anchor" href="#_3-函数的返回值"><span>3. 函数的返回值</span></a></h2><p>函数执行完毕，可以返回数据给方法的调用者。（可以返回多个数据），通过return关键字</p><p><strong>例如：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 定义加方法函数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> x <span class="token operator">+</span> y</span>
<span class="line">    <span class="token comment"># 通过return关键字，把x+y的结果返回给函数的调用者</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义变量r，接收函数的返回值</span></span>
<span class="line">r <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;调用add(1, 2)的返回结果是</span><span class="token interpolation"><span class="token punctuation">{</span>r<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">r2 <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;调用add(2, 3)的返回结果是</span><span class="token interpolation"><span class="token punctuation">{</span>r2<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505212703331.png" alt="image-20240505212703331"></p><p>如果程序需要有多个返回值，则既可将多个值包装成列表之后返回，也可直接返回多个值。如果Python函数直接返回多个值，Python会自动将多个返回值封装成元组。（后续讲到元组，我们给下实例讲解下）</p><p>如果函数没有使用return语句返回数据，则函数返回的是<strong>None</strong> 值。None是空的意思。</p><p><strong>案例：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">say_helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Python很好学&quot;</span><span class="token punctuation">)</span></span>
<span class="line">result <span class="token operator">=</span> say_helloworld<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;返回结果</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">,类型</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240505213353418.png" alt="image-20240505213353418"></p><p>上面案例等同于return None</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 定义最基础函数 helloworld</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">say_helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Python大爷你好，学Python，上www.python222.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line">result <span class="token operator">=</span> say_helloworld<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;返回结果</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">,类型</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),b=e(`<p>①可以用于if判断</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">check_user</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> userName <span class="token operator">==</span> <span class="token string">&#39;python&#39;</span> <span class="token keyword">and</span> password <span class="token operator">==</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> check_user<span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;返回结果</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 1，可以用于if判断</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;登录失败&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②可以用于声明无初始化内容的变量</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 2，可以用于声明无初始化内容的变量</span></span>
<span class="line">userName <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-函数的说明文档" tabindex="-1"><a class="header-anchor" href="#_4-函数的说明文档"><span>4. 函数的说明文档</span></a></h2><p>用&quot;&quot;&quot; &quot;&quot;&quot;备注说明，然后我们调用函数的地方，鼠标移动上去就能看到函数的说明。提供代码的可读性。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    两数相加函数</span>
<span class="line">    :param x: 两数相加数x</span>
<span class="line">    :param y: 两数相加数y</span>
<span class="line">    :return: 两数相加的结果</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>显示结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240512134057692.png" alt="image-20240512134057692"></p><h2 id="_5-变量作用域" tabindex="-1"><a class="header-anchor" href="#_5-变量作用域"><span>5. 变量作用域</span></a></h2><p>在程序中定义一个变量时，这个变量是有作用范围的，变量的作用范围被称为它的作用域。根据定义变量的位置，变量分为两种。</p><ul><li>局部变量。在函数中定义的变量，包括参数，都被称为局部变量。</li><li>全局变量。在函数外面、全局范围内定义的变量，被称为全局变量。</li></ul><p><strong>局部变量：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    name <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span></span>
<span class="line">    <span class="token comment"># 定义局部变量name</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">test<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 局部变量，外面无法使用</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240512140633842.png" alt="image-20240512140633842"></p><p><strong>全局变量：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    name <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span></span>
<span class="line">    <span class="token comment"># 定义局部变量name</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">test<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 局部变量，外面无法使用</span></span>
<span class="line"><span class="token comment"># print(name)</span></span>
<span class="line"><span class="token comment"># 打印全局变量</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用global关键字声明全局变量：</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    name <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span></span>
<span class="line">    <span class="token comment"># 定义局部变量name</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 声明全局变量name2</span></span>
<span class="line">    <span class="token keyword">global</span> name2</span>
<span class="line">    name2 <span class="token operator">=</span> <span class="token string">&quot;Marry&quot;</span></span>
<span class="line">test<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 局部变量，外面无法使用</span></span>
<span class="line"><span class="token comment"># print(name)</span></span>
<span class="line"><span class="token comment"># 打印全局变量</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong></p><p><img src="https://bucket-linxc.oss-cn-guangzhou.aliyuncs.com/images/image-20240512141352316.png" alt="image-20240512141352316"></p><h2 id="_6-递归函数" tabindex="-1"><a class="header-anchor" href="#_6-递归函数"><span>6. 递归函数</span></a></h2><p>在一个函数体内调用它自身，被称为函数递归。函数递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</p><p><strong>实例</strong>，求1+2+3+..+100的和，用递归实现。数学公式：f(n)=n+f(n-1)</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">return</span> n <span class="token operator">+</span> cal<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果：</strong> 5050</p>`,26);function y(h,_){const s=i("font");return o(),c("div",null,[r,t("ul",null,[d,k,t("li",null,[a(s,{style:{color:"red"}},{default:p(()=>[n("return返回值，返回函数的执行结果。假如没有返回值，可以省略。")]),_:1})])]),m,a(s,{style:{color:"red"}},{default:p(()=>[n("**注意点：** ")]),_:1}),v,a(s,{style:{color:"red"}},{default:p(()=>[n("**一些使用注意点：** ")]),_:1}),g,a(s,{style:{color:"red"}},{default:p(()=>[n("**这个None值有哪些作用呢？** ")]),_:1}),b,a(s,{style:{color:"red"}},{default:p(()=>[n("**注意点：** ")]),_:1}),n("递归算法，必须要有一个递归出口条件，否则无限死循环")])}const f=l(u,[["render",y],["__file","4.html.vue"]]),q=JSON.parse('{"path":"/docs/Python/4.html","title":"四、函数","lang":"en-US","frontmatter":{"title":"四、函数","date":"2018/12/30","tags":["Python语言"],"categories":["Python"]},"headers":[{"level":2,"title":"1. 函数的定义","slug":"_1-函数的定义","link":"#_1-函数的定义","children":[]},{"level":2,"title":"2. 函数的参数","slug":"_2-函数的参数","link":"#_2-函数的参数","children":[{"level":3,"title":"关键字(keyword)参数","slug":"关键字-keyword-参数","link":"#关键字-keyword-参数","children":[]},{"level":3,"title":"参数默认值","slug":"参数默认值","link":"#参数默认值","children":[]}]},{"level":2,"title":"3. 函数的返回值","slug":"_3-函数的返回值","link":"#_3-函数的返回值","children":[]},{"level":2,"title":"4. 函数的说明文档","slug":"_4-函数的说明文档","link":"#_4-函数的说明文档","children":[]},{"level":2,"title":"5. 变量作用域","slug":"_5-变量作用域","link":"#_5-变量作用域","children":[]},{"level":2,"title":"6. 递归函数","slug":"_6-递归函数","link":"#_6-递归函数","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"docs/Python/4.md"}');export{f as comp,q as data};
